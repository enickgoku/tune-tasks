generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Boards

model Board {
  id            String     @id @default(uuid())
  orgId         String
  title         String 
  imageId       String
  imageThumbUrl String      @db.Text
  imageFullUrl  String      @db.Text
  imageUserName String      @db.Text
  imageLinkHTML String      @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lists         List[]
}

// Lists

model List {
  id        String   @id @default(uuid())
  boardId   String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  order     Int
  cards     Card[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  @@index([boardId])
}

// Cards

model Card {
  id          String   @id @default(uuid())
  title       String
  order       Int
  description String?  @db.Text
  listId      String
  assignments CardAssignment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  @@index([listId])
}

model CardAssignment {
  id String @id @default(uuid())
  cardId String?
  userId String?
  delegatorId String?
  boardId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card Card? @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@index([cardId])
  @@index([userId])
}

// ENUMS

enum ACTION {
  CREATE
  UPDATE
  DELETE
  ASSIGN
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

// Audit Logs

model AuditLog {
  id          String   @id @default(uuid())
  orgId       String
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String   @db.Text
  userName    String   @db.Text
  assignedUserId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Org Tables

model OrgLimit {
  id        String   @id @default(uuid())
  orgId     String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id        String   @id @default(uuid())
  orgId     String   @unique
  stripeCustomerId String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId String? @unique @map(name: "stripe_subscription_id")
  stripePriceId String? @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
